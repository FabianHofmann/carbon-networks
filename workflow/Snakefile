import pathlib


configfile: "workflow/subworkflows/pypsa-eur/config/config.default.yaml"
configfile: "config/config.yaml"


if config["configs"]["test"]:

    configfile: "config/config.test.yaml"


if config["configs"]["presentation"]:

    configfile: "config/config.presentation.yaml"


wildcard_constraints:
    lv="[a-z0-9\.]+",
    simpl="[a-zA-Z0-9]*",
    clusters="[0-9]+m?",
    opts="[-+a-zA-Z0-9]*",
    sector_opts="[-+a-zA-Z0-9\.\s]*",


module pypsaeur:
    snakefile:
        "subworkflows/pypsa-eur/Snakefile"
    config:
        config


rule main:
    input:
        expand(
            "results/{run}/figures/{clusters}_nodes/{which}_map_{kind}.png",
            run=config["run"]["name"],
            clusters=config["scenario"]["clusters"],
            which=["capacity", "operation"],
            kind=config["constants"]["kinds"],
        ),
        expand(
            "results/{run}/figures/{clusters}_nodes/energy_balance_area_{kind}.pdf",
            run=config["run"]["name"],
            clusters=config["scenario"]["clusters"],
            kind=config["constants"]["kinds"]
            + config["constants"]["additional_kinds"],
        ),
        expand(
            "results/{run}/figures/{clusters}_nodes/{figure}.pdf",
            run=config["run"]["name"],
            clusters=config["scenario"]["clusters"],
            figure=["operation_bar", "sequestration_map"],
        ),
        expand(
            "results/comparison/{comparison}/figures/{clusters}_nodes/energy_balance_bar_{kind}.pdf",
            comparison=config["comparison"],
            clusters=config["scenario"]["clusters"],
            kind=config["constants"]["kinds"]
            + config["constants"]["additional_kinds"],
        ),
        expand(
            "results/comparison/{comparison}/figures/{clusters}_nodes/{figure}.pdf",
            comparison=config["comparison"],
            clusters=config["scenario"]["clusters"],
            figure=["cost_bar", "cost_diff_bar", "captureshare_line"],
        ),
    output:
        "results/.main",
    shell:
        """
        touch {output}
        """


rule report:
    input:
        tex=config["report"]["path"] + ".tex",
        bib="report/references.bib",
        figures="results/.main",
    output:
        pdf=config["report"]["path"] + ".pdf",
    shell:
        """
        pdflatex {input.tex}
        bibtex {input.bib})
        pdflatex {input.tex}
        pdflatex {input.tex}
        """


data_dir = pathlib.Path("workflow/subworkflows/pypsa-eur/data")


rule get_data:
    output:
        [
            str(pathlib.Path("data") / p.relative_to(data_dir))
            for p in data_dir.rglob("*")
            if p.is_file()
        ],
    shell:
        """
        mkdir -p data
        cp -nR {data_dir}/. data/
        """


rule get_solved_network:
    """
    Copy the solved network under a new name to fix unneeded wildcards.
    """
    input:
        network="results/{{run}}/postnetworks/elec_s{simpl}_{{clusters}}_l{ll}_{opts}_{sector_opts}_{planning_horizons}.nc".format(
            **config["scenario"]
        ),
    output:
        network="results/{run}/networks/{clusters}_nodes.nc",
    shell:
        """
        cp {input} {output}
        """


rule get_all_solved_networks:
    input:
        expand(
            "results/{run}/networks/{clusters}_nodes.nc",
            run=config["run"]["name"],
            **config["scenario"]
        ),


rule plot_operation_bar:
    params:
        settings=config["plotting"]["operation_bar"],
        theme=config["plotting"]["theme"],
    input:
        network="results/{run}/networks/{clusters}_nodes.nc",
    output:
        map="results/{run}/figures/{clusters}_nodes/operation_bar.{ext}",
    script:
        "scripts/plot-operation-bar.py"


rule plot_capacity_map:
    params:
        settings=config["plotting"]["capacity_map"],
        theme=config["plotting"]["theme"],
    input:
        network="results/{run}/networks/{clusters}_nodes.nc",
        onshore_regions="resources/regions_onshore_elec_s{simpl}_{{clusters}}.geojson".format(
            **config["scenario"]
        ),
        offshore_regions="resources/regions_offshore_elec_s{simpl}_{{clusters}}.geojson".format(
            **config["scenario"]
        ),
    output:
        **{
            kind: f"results/{{run}}/figures/{{clusters}}_nodes/capacity_map_{kind}.{{ext}}"
            for kind in config["constants"]["kinds"]
        },
    resources:
        mem_mb=20000,
    script:
        "scripts/plot-capacity-map.py"


rule plot_sequestration_map:
    params:
        settings=config["plotting"]["sequestration_map"],
        theme=config["plotting"]["theme"],
    input:
        network="results/{run}/networks/{clusters}_nodes.nc",
        offshore_regions="resources/regions_offshore_elec_s{simpl}_{{clusters}}.geojson".format(
            **config["scenario"]
        ),
    output:
        map="results/{run}/figures/{clusters}_nodes/sequestration_map.{ext}",
    script:
        "scripts/plot-sequestration-map.py"


rule plot_operation_map:
    params:
        settings=config["plotting"]["operation_map"],
        theme=config["plotting"]["theme"],
    input:
        network="results/{run}/networks/{clusters}_nodes.nc",
        onshore_regions="resources/regions_onshore_elec_s{simpl}_{{clusters}}.geojson".format(
            **config["scenario"]
        ),
    resources:
        mem_mb=20000,
    output:
        **{
            kind: f"results/{{run}}/figures/{{clusters}}_nodes/operation_map_{kind}.{{ext}}"
            for kind in config["constants"]["kinds"]
        },
    script:
        "scripts/plot-operation-map.py"


rule plot_energy_balance_area:
    params:
        settings=config["plotting"]["energy_balance_area"],
        theme=config["plotting"]["theme"],
        label=lambda w: config["labels"][w.run],
    input:
        network="results/{run}/networks/{clusters}_nodes.nc",
    output:
        **{
            kind: f"results/{{run}}/figures/{{clusters}}_nodes/energy_balance_area_{kind}.{{ext}}"
            for kind in config["constants"]["kinds"]
            + config["constants"]["additional_kinds"]
        },
    resources:
        mem_mb=20000,
    script:
        "scripts/plot-energy-balance-area.py"


# COMPARISON


def get_networks(w):
    return expand(
        "results/{run}/networks/{clusters}_nodes.nc",
        run=config["comparison"][w.comparison],
        **w,
    )


rule plot_cost_bar:
    params:
        technology_groups=config["plotting"]["technology_groups"],
        technology_groups_colors=config["plotting"]["technology_group_colors"],
        settings=config["plotting"]["cost_bar"],
        theme=config["plotting"]["theme"],
        labels=config["labels"],
    input:
        networks=get_networks,
    output:
        map="results/comparison/{comparison}/figures/{clusters}_nodes/cost_bar.{ext}",
    resources:
        mem_mb=20000,
    script:
        "scripts/plot-cost-bar.py"


rule plot_cost_diff_bar:
    params:
        technology_groups=config["plotting"]["technology_groups"],
        technology_groups_colors=config["plotting"]["technology_group_colors"],
        settings=config["plotting"]["cost_diff_bar"],
        theme=config["plotting"]["theme"],
        labels=config["labels"],
    input:
        networks=get_networks,
    output:
        map="results/comparison/{comparison}/figures/{clusters}_nodes/cost_diff_bar.{ext}",
    resources:
        mem_mb=20000,
    script:
        "scripts/plot-cost-diff-bar.py"


rule plot_energy_balance_bar:
    params:
        settings=config["plotting"]["energy_balance_bar"],
        theme=config["plotting"]["theme"],
        labels=config["labels"],
    input:
        networks=get_networks,
    output:
        **{
            kind: f"results/comparison/{{comparison}}/figures/{{clusters}}_nodes/energy_balance_bar_{kind}.{{ext}}"
            for kind in config["constants"]["kinds"]
            + config["constants"]["additional_kinds"]
        },
    resources:
        mem_mb=20000,
    script:
        "scripts/plot-energy-balance-bar.py"


rule plot_captureshare_line:
    params:
        settings=config["plotting"]["captureshare_line"],
        theme=config["plotting"]["theme"],
        labels=config["labels"],
    input:
        networks=get_networks,
    output:
        map="results/comparison/{comparison}/figures/{clusters}_nodes/captureshare_line.{ext}",
    resources:
        mem_mb=20000,
    script:
        "scripts/plot-captureshare-line.py"


def get_maps(w):
    return expand(
        "results/{run}/figures/{clusters}_nodes/{which}_map_{kind}.png",
        **w,
        run=config["run"]["name"],
    )


rule gif_map:
    input:
        get_maps,
    output:
        "results/comparison/{comparison}/gifs/{clusters}_nodes/{which}_map_{kind}.gif",
    shell:
        """
        convert -delay 100 -loop 0 -gravity South -background White -splice 0x35 -pointsize 40 -annotate +0+4 %f {input} {output}
        """


rule push:
    params:
        cluster=f"{config['remote']['ssh']}:{config['remote']['path']}",
    shell:
        """
        rsync -uvarh --ignore-missing-args --files-from=.sync-send . {params.cluster}
        """


rule pull:
    params:
        cluster=f"{config['remote']['ssh']}:{config['remote']['path']}",
    shell:
        """
        rsync -uvarh --no-g {params.cluster}/resources . || echo "No resources directory, skipping rsync"
        rsync -uvarh --no-g {params.cluster}/results . || echo "No results directory, skipping rsync"
        rsync -uvarh --no-g {params.cluster}/logs . || echo "No logs directory, skipping rsync"
        """


use rule * from pypsaeur
