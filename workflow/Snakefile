import pathlib
import re


configfile: "workflow/subworkflows/pypsa-eur/config/config.default.yaml"
configfile: "config/config.pypsa-eur.yaml"
configfile: "config/config.yaml"
configfile: "config/config.plotting.yaml"
configfile: "config/config.constants.yaml"


if config["configs"]["test"]:

    configfile: "config/config.test.yaml"


if config["configs"]["presentation"]:

    configfile: "config/config.presentation.yaml"


wildcard_constraints:
    lv="[a-z0-9\.]+",
    simpl="[a-zA-Z0-9]*",
    clusters="[0-9]+m?",
    opts="[-+a-zA-Z0-9]*",
    sector_opts="[-+a-zA-Z0-9\.\s]*",


module pypsaeur:
    snakefile:
        "subworkflows/pypsa-eur/Snakefile"
    config:
        config


def get_graphics(tex_file):
    with open(tex_file, "r") as file:
        contents = file.read()
    graphs = re.findall(r"\\includegraphics\[.*\]\{(.+?)\}", contents)
    prefix = "results/"
    return [prefix + graph for graph in graphs]


rule graphics:
    input:
        get_graphics(config["report"]["path"]),


rule main:
    input:
        expand(
            "results/{run}/figures/{clusters}_nodes/capacity_map_{kind}.png",
            run=config["run"]["name"],
            clusters=config["scenario"]["clusters"],
            kind=config["constants"]["kinds"],
        ),
        expand(
            "results/{run}/figures/{clusters}_nodes/{figure}_{kind}.png",
            figure=["balance_map"],
            run=config["run"]["name"],
            clusters=config["scenario"]["clusters"],
            kind=config["constants"]["kinds"]
            + config["constants"]["additional_kinds"],
        ),
        expand(
            "results/{run}/figures/{clusters}_nodes/balance_area_{kind}.png",
            run=config["run"]["name"],
            clusters=config["scenario"]["clusters"],
            kind=config["constants"]["kinds"]
            + config["constants"]["additional_kinds"],
        ),
        expand(
            "results/{run}/figures/{clusters}_nodes/{figure}.png",
            run=config["run"]["name"],
            clusters=config["scenario"]["clusters"],
            figure=[
                "sequestration_map",
                "capacity_bar_country",
                "sankey_diagramm",
            ],
        ),
        expand(
            "results/comparison/{comparison}/figures/{clusters}_nodes/balance_bar_{kind}.png",
            comparison=config["comparison"],
            clusters=config["scenario"]["clusters"],
            kind=config["constants"]["kinds"]
            + config["constants"]["additional_kinds"],
        ),
        expand(
            "results/comparison/{comparison}/figures/{clusters}_nodes/{figure}.png",
            comparison=list(config["comparison"]) + ["all"],
            clusters=config["scenario"]["clusters"],
            figure=[
                "cost_bar",
                "captureshare_line",
                "cost_bar_transmission",
            ],
        ),
        expand(
            "results/difference/{difference}/figures/{clusters}_nodes/{figure}.png",
            difference=config["difference"],
            clusters=config["scenario"]["clusters"],
            figure=[
                "cost_bar",
                "cost_map",
            ],
        ),
        expand(
            "results/difference/comparison/{comparison}/figures/{clusters}_nodes/{figure}.png",
            comparison=config["difference-comparison"],
            clusters=config["scenario"]["clusters"],
            figure=[
                "cost_bar",
            ],
        ),
        expand(
            "results/comparison/emission-reduction/figures/{clusters}_nodes/objective_heatmap.{ext}",
            clusters=config["scenario"]["clusters"],
            ext=["png"],
        ),
        # dedicated plots
        "results/comparison/single-technologies/figures/90_nodes/balance_map_dedicated.png",
        "results/baseline/figures/90_nodes/demand_bar.png",
    output:
        "results/figures.zip",
        # "results/.main",
    shell:
        """
        # touch {output}
        zip -u {output} {input}
        """


rule report:
    input:
        tex=config["report"]["path"],
        bib="report/references.bib",
        figures="results/.main",
    output:
        pdf=config["report"]["path"].replace(".tex", ".pdf"),
    shell:
        """
        pdflatex {input.tex} && bibtex {input.bib} && pdflatex {input.tex} && pdflatex {input.tex}
        """


data_dir = pathlib.Path("workflow/subworkflows/pypsa-eur/data")


rule get_data:
    output:
        [
            str(pathlib.Path("data") / p.relative_to(data_dir))
            for p in data_dir.rglob("*")
            if p.is_file()
        ],
    shell:
        """
        mkdir -p data
        cp -nR {data_dir}/. data/
        """


rule get_solved_network:
    """
    Copy the solved network under a new name to fix unneeded wildcards.
    """
    input:
        network="results/{{run}}/postnetworks/elec_s{simpl}_{{clusters}}_l{ll}_{opts}_{sector_opts}_{planning_horizons}.nc".format(
            **config["scenario"]
        ),
    output:
        network=protected("results/{run}/networks/{clusters}_nodes.nc"),
    shell:
        """
        cp {input} {output}
        """


rule get_all_solved_networks:
    input:
        expand(
            "results/{run}/networks/{clusters}_nodes.nc",
            run=config["run"]["name"],
            **config["scenario"]
        ),


rule plot_demand_bar:
    params:
        theme=config["plotting"]["theme"],
    input:
        network="results/{run}/networks/{clusters}_nodes.nc",
    output:
        figure="results/{run}/figures/{clusters}_nodes/demand_bar.{ext}",
        table="results/{run}/figures/{clusters}_nodes/demand_bar.{ext}.csv",
    resources:
        mem_mb=20000,
    script:
        "scripts/plot_demand_bar.py"


rule plot_capacity_map:
    params:
        settings=config["plotting"]["capacity_map"],
        theme=config["plotting"]["theme"],
    input:
        network="results/{run}/networks/{clusters}_nodes.nc",
        onshore_regions="resources/regions_onshore_elec_s{simpl}_{{clusters}}.geojson".format(
            **config["scenario"]
        ),
        offshore_regions="resources/regions_offshore_elec_s{simpl}_{{clusters}}.geojson".format(
            **config["scenario"]
        ),
    output:
        **{
            kind: f"results/{{run}}/figures/{{clusters}}_nodes/capacity_map_{kind}.{{ext}}"
            for kind in config["constants"]["kinds"]
        },
    resources:
        mem_mb=20000,
    script:
        "scripts/plot_capacity_map.py"


rule plot_capacity_bar_country:
    params:
        settings=config["plotting"]["capacity_bar_country"],
        theme=config["plotting"]["theme"],
    input:
        network="results/{run}/networks/{clusters}_nodes.nc",
    output:
        figure="results/{run}/figures/{clusters}_nodes/capacity_bar_country.{ext}",
        table="results/{run}/figures/{clusters}_nodes/capacity_bar_country.{ext}.csv",
    resources:
        mem_mb=20000,
    script:
        "scripts/plot_capacity_bar_country.py"


rule plot_sequestration_map:
    params:
        settings=config["plotting"]["sequestration_map"],
        theme=config["plotting"]["theme"],
    input:
        network="results/{run}/networks/{clusters}_nodes.nc",
        offshore_regions="resources/regions_offshore_elec_s{simpl}_{{clusters}}.geojson".format(
            **config["scenario"]
        ),
    output:
        map="results/{run}/figures/{clusters}_nodes/sequestration_map.{ext}",
    script:
        "scripts/plot_sequestration_map.py"


rule plot_balance_map:
    params:
        settings=config["plotting"]["balance_map"],
        theme=config["plotting"]["theme"],
    input:
        network="results/{run}/networks/{clusters}_nodes.nc",
        onshore_regions="resources/regions_onshore_elec_s{simpl}_{{clusters}}.geojson".format(
            **config["scenario"]
        ),
        offshore_regions="resources/regions_offshore_elec_s{simpl}_{{clusters}}.geojson".format(
            **config["scenario"]
        ),
    resources:
        mem_mb=20000,
    output:
        **{
            kind: f"results/{{run}}/figures/{{clusters}}_nodes/balance_map_{kind}.{{ext}}"
            for kind in config["constants"]["kinds"]
            + config["constants"]["additional_kinds"]
        },
    script:
        "scripts/plot_balance_map.py"


rule plot_balance_area:
    params:
        settings=config["plotting"]["balance_area"],
        theme=config["plotting"]["theme"],
        label=lambda w: config["labels"][w.run],
    input:
        network="results/{run}/networks/{clusters}_nodes.nc",
    output:
        **{
            kind: f"results/{{run}}/figures/{{clusters}}_nodes/balance_area_{kind}.{{ext}}"
            for kind in config["constants"]["kinds"]
            + config["constants"]["additional_kinds"]
        },
    resources:
        mem_mb=20000,
    script:
        "scripts/plot_balance_area.py"


rule plot_sankey_diagramm:
    params:
        settings=config["plotting"].get("sankey_diagramm"),
        label=lambda w: config["labels"][w.run],
    input:
        network="results/{run}/networks/{clusters}_nodes.nc",
    output:
        map="results/{run}/figures/{clusters}_nodes/sankey_diagramm.{ext}",
    resources:
        mem_mb=20000,
    script:
        "scripts/plot_sankey_diagramm.py"


# COMPARISON
def get_comparison_networks(w):
    return expand(
        "results/{run}/networks/{clusters}_nodes.nc",
        run=config["comparison"][w.comparison],
        **w,
    )


def is_wide(w):
    return len(config["comparison"][w.comparison]) > 4


rule plot_objectice_heatmap:
    params:
        settings=config["plotting"]["objective_heatmap"],
        theme=config["plotting"]["theme"],
        labels=config["labels"],
    input:
        networks=get_comparison_networks,
    output:
        figure="results/comparison/{comparison}/figures/{clusters}_nodes/objective_heatmap.{ext}",
    resources:
        mem_mb=20000,
    script:
        "scripts/plot_objective_heatmap.py"


rule plot_cost_bar:
    params:
        technology_groups=config["plotting"]["technology_groups"],
        technology_groups_colors=config["plotting"]["technology_group_colors"],
        settings=lambda w: config["plotting"]["cost_bar_wide"]
        if is_wide(w)
        else config["plotting"]["cost_bar"],
        theme=config["plotting"]["theme"],
        labels=config["labels"],
    input:
        networks=get_comparison_networks,
    output:
        figure="results/comparison/{comparison}/figures/{clusters}_nodes/cost_bar.{ext}",
        table="results/comparison/{comparison}/figures/{clusters}_nodes/cost_bar.{ext}.csv",
    resources:
        mem_mb=20000,
    script:
        "scripts/plot_cost_bar.py"


rule plot_cost_bar_transmission:
    params:
        technology_groups=config["plotting"]["technology_groups"],
        technology_groups_colors=config["plotting"]["technology_group_colors"],
        settings=lambda w: config["plotting"]["cost_bar_transmission_wide"]
        if is_wide(w)
        else config["plotting"]["cost_bar_transmission"],
        theme=config["plotting"]["theme"],
        labels=config["labels"],
    input:
        networks=get_comparison_networks,
    output:
        figure="results/comparison/{comparison}/figures/{clusters}_nodes/cost_bar_transmission.{ext}",
        table="results/comparison/{comparison}/figures/{clusters}_nodes/cost_bar_transmission.{ext}.csv",
    resources:
        mem_mb=20000,
        threads=2,
    script:
        "scripts/plot_cost_bar_transmission.py"


rule plot_balance_bar:
    params:
        settings=lambda w: config["plotting"]["balance_bar_wide"]
        if is_wide(w)
        else config["plotting"]["balance_bar"],
        theme=config["plotting"]["theme"],
        labels=config["labels"],
    input:
        networks=get_comparison_networks,
    output:
        **{
            kind: f"results/comparison/{{comparison}}/figures/{{clusters}}_nodes/balance_bar_{kind}.{{ext}}"
            for kind in config["constants"]["kinds"]
            + config["constants"]["additional_kinds"]
        },
        **{
            f"table-{kind}": f"results/comparison/{{comparison}}/figures/{{clusters}}_nodes/balance_bar_{kind}.{{ext}}.csv"
            for kind in config["constants"]["kinds"]
            + config["constants"]["additional_kinds"]
        },
    resources:
        mem_mb=20000,
    script:
        "scripts/plot_balance_bar.py"


rule plot_captureshare_line:
    params:
        settings=config["plotting"]["captureshare_line"],
        theme=config["plotting"]["theme"],
        labels=config["labels"],
    input:
        networks=get_comparison_networks,
    output:
        figure="results/comparison/{comparison}/figures/{clusters}_nodes/captureshare_line.{ext}",
        table="results/comparison/{comparison}/figures/{clusters}_nodes/captureshare_line.{ext}.csv",
    resources:
        mem_mb=20000,
    script:
        "scripts/plot_captureshare_line.py"


# DIFFERENCE


def get_difference_networks(w):
    return expand(
        "results/{run}/networks/{clusters}_nodes.nc",
        run=config["difference"][w.difference],
        **w,
    )


rule plot_cost_bar_diff:
    params:
        technology_groups=config["plotting"]["technology_groups"],
        technology_groups_colors=config["plotting"]["technology_group_colors"],
        settings=config["plotting"]["cost_bar_diff"],
        theme=config["plotting"]["theme"],
        labels=config["labels"],
    input:
        networks=get_difference_networks,
    output:
        figure="results/difference/{difference}/figures/{clusters}_nodes/cost_bar.{ext}",
        table="results/difference/{difference}/figures/{clusters}_nodes/cost_bar.{ext}.csv",
    resources:
        mem_mb=20000,
    script:
        "scripts/plot_cost_bar_diff.py"


rule plot_cost_map_diff:
    params:
        settings=config["plotting"]["cost_map_diff"],
        theme=config["plotting"]["theme"],
        labels=config["labels"],
    input:
        networks=get_difference_networks,
        regions="resources/regions_onshore_elec_s{simpl}_{{clusters}}.geojson".format(
            **config["scenario"]
        ),
    output:
        map="results/difference/{difference}/figures/{clusters}_nodes/cost_map.{ext}",
    resources:
        mem_mb=20000,
    script:
        "scripts/plot_cost_map_diff.py"


# DIFFERENCE COMPARISON
def get_difference_comparison_networks(w):
    return expand(
        "results/{run}/networks/{clusters}_nodes.nc",
        run=[
            network
            for k in config["difference-comparison"][w.comparison]
            for network in config["difference"][k]
        ],
        **w,
    )


rule plot_cost_bar_compare_diff:
    params:
        technology_groups=config["plotting"]["technology_groups"],
        technology_groups_colors=config["plotting"]["technology_group_colors"],
        settings=config["plotting"]["cost_bar_compare_diff"],
        theme=config["plotting"]["theme"],
        labels=config["labels"],
    input:
        networks=get_difference_comparison_networks,
    output:
        figure="results/difference/comparison/{comparison}/figures/{clusters}_nodes/cost_bar.{ext}",
        table="results/difference/comparison/{comparison}/figures/{clusters}_nodes/cost_bar.{ext}.csv",
    resources:
        mem_mb=20000,
    script:
        "scripts/plot_cost_bar_compare_diff.py"


# DEDICATED PLOTS
# this section contains plots that are not fully parameterized and serve a dedicated purpose for the paper


rule plot_balance_map_dedicated:
    """
    Plot for dedicated comparison between carbon and hydrogen infrastucture.
    """
    params:
        settings=config["plotting"]["balance_map"],
        theme=config["plotting"]["theme"],
    input:
        networks=[
            "results/{run}/networks/{{clusters}}_nodes.nc".format(run=run)
            for run in ["co2-only", "h2-only"]
        ],
        onshore_regions="resources/regions_onshore_elec_s{simpl}_{{clusters}}.geojson".format(
            **config["scenario"]
        ),
        offshore_regions="resources/regions_offshore_elec_s{simpl}_{{clusters}}.geojson".format(
            **config["scenario"]
        ),
    resources:
        mem_mb=20000,
    output:
        figure="results/comparison/single-technologies/figures/{clusters}_nodes/balance_map_dedicated.{ext}",
    script:
        "scripts/plot_balance_map_dedicated.py"


# OTHER


def get_maps(w):
    return expand(
        "results/{run}/figures/{clusters}_nodes/{which}_map_{kind}.png",
        **w,
        run=config["run"]["name"],
    )


rule gif_map:
    input:
        get_maps,
    output:
        "results/comparison/{comparison}/gifs/{clusters}_nodes/{which}_map_{kind}.gif",
    shell:
        """
        convert -delay 100 -loop 0 -gravity South -background White -splice 0x35 -pointsize 40 -annotate +0+4 %f {input} {output}
        """


rule push:
    params:
        cluster=f"{config['remote']['ssh']}:{config['remote']['path']}",
    shell:
        """
        rsync -uvarh --ignore-missing-args --files-from=.sync-send . {params.cluster}
        """


rule pull:
    params:
        cluster=f"{config['remote']['ssh']}:{config['remote']['path']}",
    shell:
        """
        rsync -uvarh --no-g {params.cluster}/resources . || echo "No resources directory, skipping rsync"
        rsync -uvarh --no-g {params.cluster}/results . || echo "No results directory, skipping rsync"
        rsync -uvarh --no-g {params.cluster}/logs . || echo "No logs directory, skipping rsync"
        """


use rule * from pypsaeur
