# Merge subworkflow configs and main config
configfile: "config/config.pypsa-eur.yaml"
configfile: "config/config.pypsa-eur-sec.yaml"
configfile: "config/config.yaml"


from shutil import copyfile

copyfile("config/config.pypsa-eur.yaml", "workflow/subworkflows/pypsa-eur/config.yaml")
copyfile(
    "config/config.pypsa-eur-sec.yaml",
    "workflow/subworkflows/pypsa-eur-sec/config.yaml",
)


wildcard_constraints:
    lv="[a-z0-9\.]+",
    simpl="[a-zA-Z0-9]*",
    clusters="[0-9]+m?",
    opts="[-+a-zA-Z0-9]*",
    sector_opts="[-+a-zA-Z0-9\.\s]*",


localrules:
    all,
    report,
    clean,


subworkflow pypsaeur:
    configfile:
        "config/config.pypsa-eur.yaml"
    workdir:
        "subworkflows/pypsa-eur"
    snakefile:
        "subworkflows/pypsa-eur/Snakefile"


subworkflow pypsaeursec:
    configfile:
        "config/config.pypsa-eur-sec.yaml"
    workdir:
        "subworkflows/pypsa-eur-sec"
    snakefile:
        "subworkflows/pypsa-eur-sec/Snakefile"


SDIR = config["summary_dir"] + "/" + config["run"]
RDIR = config["results_dir"] + config["run"]
CDIR = config["costs_dir"]
# flatten config
base = dict()
for k, v in config["scenario"].items():
    base[k] = v[0]


rule all:
    input:
        expand(
            RDIR + "/figures/capacity_map_{design}_{sequestration}.pdf",
            **config["scenarios"]
        ),
        expand(
            RDIR + "/figures/operation_map_{kind}_{design}_{sequestration}.pdf",
            **config["scenarios"],
            kind=config["constants"]["kinds"]
        ),
        expand(
            RDIR + "/figures/operation_bar_{design}_{sequestration}.pdf",
            **config["scenarios"]
        ),
        expand(
            RDIR + "/figures/operation_area_{kind}_{design}.pdf",
            **config["scenarios"],
            kind=config["constants"]["kinds"]
        ),


rule plot_capacity_map:
    input:
        network=RDIR + "/networks/{design}_{sequestration}.nc",
        onshore_regions=pypsaeur(
            "resources/regions_onshore_elec_s{simpl}_{clusters}.geojson".format(**base)
        ),
        offshore_regions=pypsaeur(
            "resources/regions_offshore_elec_s{simpl}_{clusters}.geojson".format(
                **base
            )
        ),
    output:
        map=RDIR + "/figures/capacity_map_{design}_{sequestration}.pdf",
    script:
        "scripts/plot-capacity-map.py"


rule plot_operation_map:
    input:
        network=RDIR + "/networks/{design}_{sequestration}.nc",
        onshore_regions=pypsaeur(
            "resources/regions_onshore_elec_s{simpl}_{clusters}.geojson".format(**base)
        ),
    output:
        map=RDIR + "/figures/operation_map_{kind}_{design}_{sequestration}.pdf",
    script:
        "scripts/plot-operation-map.py"


rule plot_operation_bar:
    input:
        network=RDIR + "/networks/{design}_{sequestration}.nc",
    output:
        map=RDIR + "/figures/operation_bar_{design}_{sequestration}.pdf",
    script:
        "scripts/plot-operation-bar.py"


def get_design_networks(w):
    return expand(
        RDIR + "/networks/{design}_{sequestration}.nc",
        sequestration=config["scenarios"]["sequestration"],
        **w
    )


rule plot_operation_area:
    input:
        networks=get_design_networks,
    output:
        map=RDIR + "/figures/operation_area_{kind}_{design}.pdf",
    script:
        "scripts/plot-operation-area.py"


def get_solved_network(wildcards):
    scenario = base.copy()
    sector_opts = scenario["sector_opts"] + f"-seq{wildcards.sequestration}"
    if wildcards.design == "noco2network":
        sector_opts = sector_opts + "-CF+sector+co2network+false"
    scenario["sector_opts"] = sector_opts
    return pypsaeursec(
        RDIR
        + "/postnetworks/elec_s{simpl}_{clusters}_lv{lv}_{opts}_{sector_opts}_{planning_horizons}.nc".format(
            **scenario
        )
    )


rule get_solved_network:
    input:
        get_solved_network,
    output:
        RDIR + "/networks/{design}_{sequestration}.nc",
    shell:
        """
        cp {input} {output}
        """


rule report:
    message:
        "Compile report."
    input:
        tex="report/report.tex",
        bib="report/references.bib",
    output:
        "report/report.pdf",
    shell:
        """
        pdflatex {input.tex}
        bibtex {input.bib})
        pdflatex {input.tex}
        pdflatex {input.tex}
        """


rule dag:
    message:
        "Plot dependency graph of the workflow."
    output:
        dot="resources/dag.dot",
        pdf="resources/dag.pdf",
    shell:
        """
        snakemake --rulegraph > {output.dot}
        dot -Tpdf -o {output.pdf} {output.dot}
        """


rule clean:
    message:
        "Remove all build results but keep downloaded data."
    run:
        import shutil

        shutil.rmtree("resources")
        shutil.rmtree("results")
        print("Data downloaded to data/ has not been cleaned.")
