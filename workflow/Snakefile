TEST = False

if TEST:
    sec_config = "config/config.pypsa-eur-sec.test.yaml"
else:
    sec_config = "config/config.pypsa-eur-sec.yaml"


# Merge subworkflow configs and main config
configfile: "config/config.pypsa-eur.yaml"
configfile: sec_config
configfile: "config/config.yaml"
configfile: "config/config.cluster.yaml"


from shutil import copyfile

copyfile("config/config.pypsa-eur.yaml", "workflow/subworkflows/pypsa-eur/config.yaml")
copyfile(
    sec_config,
    "workflow/subworkflows/pypsa-eur-sec/config.yaml",
)


wildcard_constraints:
    lv="[a-z0-9\.]+",
    simpl="[a-zA-Z0-9]*",
    clusters="[0-9]+m?",
    opts="[-+a-zA-Z0-9]*",
    sector_opts="[-+a-zA-Z0-9\.\s]*",


localrules:
    all,
    report,
    clean,


subworkflow pypsaeur:
    configfile:
        "config/config.pypsa-eur.yaml"
    workdir:
        "subworkflows/pypsa-eur"
    snakefile:
        "subworkflows/pypsa-eur/Snakefile"


subworkflow pypsaeursec:
    configfile:
        sec_config
    workdir:
        "subworkflows/pypsa-eur-sec"
    snakefile:
        "subworkflows/pypsa-eur-sec/Snakefile"


SDIR = config["summary_dir"] + "/" + config["run"]
RDIR = config["results_dir"] + config["run"]
CDIR = config["costs_dir"]
# flatten config
base = dict()
for k, v in config["scenario"].items():
    base[k] = v[0]


rule eem:
    message:
        "Compile figures for EEM paper."
    input:
        filenames=[
            RDIR + "/figures/sequestration_map.png",
            RDIR + "/figures/cost_area.pdf",
            RDIR + "/figures/capacity_map_electricity_co2network_1000.png",
            RDIR + "/figures/capacity_map_carbon_co2network_1000.png",
            RDIR + "/figures/capacity_map_hydrogen_co2network_1000.png",
            RDIR + "/figures/operation_map_carbon_co2network_1000.png",
            RDIR + "/figures/operation_area_carbon_co2network.pdf",
            RDIR + "/figures/operation_area_co2_co2network.pdf",
            RDIR + "/figures/operation_area_hydrogen_co2network.pdf",
            RDIR + "/figures/operation_area_carbon_noco2network.pdf",
            RDIR + "/figures/operation_area_co2_noco2network.pdf",
            RDIR + "/figures/operation_area_hydrogen_noco2network.pdf",
            RDIR + "/figures/captureshare_line.pdf",
        ],


rule all:
    input:
        expand(
            RDIR + "/figures/capacity_map_{kind}_{design}_{sequestration}.pdf",
            kind=config["constants"]["kinds"],
            **config["scenarios"]
        ),
        expand(
            RDIR + "/figures/operation_map_{kind}_{design}_{sequestration}.pdf",
            **config["scenarios"],
            kind=config["constants"]["kinds"]
        ),
        expand(
            RDIR + "/figures/operation_area_{kind}_{design}.pdf",
            **config["scenarios"],
            kind=config["constants"]["kinds"]
        ),
        RDIR + "/figures/cost_area.pdf",


def get_all_networks(w):
    return expand(
        RDIR + "/networks/{design}_{sequestration}.nc",
        design=config["scenarios"]["design"],
        sequestration=config["scenarios"]["sequestration"],
    )


rule plot_cost_area:
    params:
        config["plotting"]["technology_groups"],
        config["plotting"]["technology_group_colors"],
    input:
        networks=get_all_networks,
    output:
        map=RDIR + "/figures/cost_area.{ext}",
    resources:
        mem_mb=20000,
    script:
        "scripts/plot-cost-area.py"


rule plot_capacity_map:
    params:
        settings=config["plotting"]["capacity_map"],
    input:
        network=RDIR + "/networks/{design}_{sequestration}.nc",
        onshore_regions=pypsaeur(
            "resources/regions_onshore_elec_s{simpl}_{clusters}.geojson".format(**base)
        ),
        offshore_regions=pypsaeur(
            "resources/regions_offshore_elec_s{simpl}_{clusters}.geojson".format(
                **base
            )
        ),
    output:
        map=RDIR + "/figures/capacity_map_{kind}_{design}_{sequestration}.{ext}",
    resources:
        mem_mb=20000,
    script:
        "scripts/plot-capacity-map.py"


rule plot_sequestration_map:
    input:
        network=RDIR + "/networks/co2network_200.nc",  # take any network
        offshore_regions=pypsaeur(
            "resources/regions_offshore_elec_s{simpl}_{clusters}.geojson".format(
                **base
            )
        ),
    output:
        map=RDIR + "/figures/sequestration_map.{ext}",
    script:
        "scripts/plot-sequestration-map.py"


rule plot_operation_map:
    params:
        settings=config["plotting"]["operation_map"],
    input:
        network=RDIR + "/networks/{design}_{sequestration}.nc",
        onshore_regions=pypsaeur(
            "resources/regions_onshore_elec_s{simpl}_{clusters}.geojson".format(**base)
        ),
    resources:
        mem_mb=20000,
    output:
        map=RDIR + "/figures/operation_map_{kind}_{design}_{sequestration}.{ext}",
    script:
        "scripts/plot-operation-map.py"


rule plot_operation_bar:
    input:
        network=RDIR + "/networks/{design}_{sequestration}.nc",
    output:
        map=RDIR + "/figures/operation_bar_{design}_{sequestration}.{ext}",
    script:
        "scripts/plot-operation-bar.py"


def get_design_networks(w):
    return expand(
        RDIR + "/networks/{design}_{sequestration}.nc",
        sequestration=config["scenarios"]["sequestration"],
        **w
    )


rule plot_operation_area:
    input:
        networks=get_design_networks,
    output:
        map=RDIR + "/figures/operation_area_{kind}_{design}.{ext}",
    resources:
        mem_mb=20000,
    script:
        "scripts/plot-operation-area.py"


rule plot_captureshare_line:
    input:
        networks=get_all_networks,
    output:
        map=RDIR + "/figures/captureshare_line.{ext}",
    resources:
        mem_mb=20000,
    script:
        "scripts/plot-captureshare-line.py"


def get_solved_network(wildcards):
    scenario = base.copy()
    sector_opts = scenario["sector_opts"] + f"-seq{wildcards.sequestration}"
    if wildcards.design == "noco2network":
        sector_opts = sector_opts + "-CF+sector+co2network+false"
    scenario["sector_opts"] = sector_opts
    return pypsaeursec(
        RDIR
        + "/postnetworks/elec_s{simpl}_{clusters}_lv{lv}_{opts}_{sector_opts}_{planning_horizons}.nc".format(
            **scenario
        )
    )


rule get_solved_network:
    input:
        get_solved_network,
    output:
        RDIR + "/networks/{design}_{sequestration}.nc",
    shell:
        """
        cp {input} {output}
        """


rule get_all_solved_networks:
    input:
        expand(RDIR + "/networks/{design}_{sequestration}.nc", **config["scenarios"]),


rule sync:
    params:
        cluster=config["cluster"],
    shell:
        """
        rsync -uvarh --no-g --ignore-missing-args --files-from=.sync-send . {params.cluster}
        rsync -uvarh --no-g --files-from=.sync-receive {params.cluster} .
        """
