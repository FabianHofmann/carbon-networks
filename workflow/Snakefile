TEST = 1


configfile: "config/config.pypsa-eur.yaml"
configfile: "config/config.yaml"
configfile: "config/config.cluster.yaml"


if TEST:

    configfile: "config/config.pypsa-eur.test.yaml"


wildcard_constraints:
    lv="[a-z0-9\.]+",
    simpl="[a-zA-Z0-9]*",
    clusters="[0-9]+m?",
    opts="[-+a-zA-Z0-9]*",
    sector_opts="[-+a-zA-Z0-9\.\s]*",


module pypsaeur:
    snakefile:
        "subworkflows/pypsa-eur/Snakefile"
    config:
        config
# add data path from pypsa-eur



base = dict()
for k, v in config["scenario"].items():
    base[k] = v[0]
RESOURCES = "resources/" + config["run"]["name"] + "/"
RESULTS = "results/" + config["run"]["name"] + "/"


rule journal:
    message:
        "Compile figures for journal paper."
    input:
        filenames=[
            RESULTS + "figures/sequestration_map.png",
            RESULTS + "figures/cost_area.pdf",
            RESULTS + "figures/capacity_map_electricity_co2network_1000.png",
            RESULTS + "figures/capacity_map_carbon_co2network_1000.png",
            RESULTS + "figures/capacity_map_hydrogen_co2network_1000.png",
            RESULTS + "figures/operation_map_carbon_co2network_200.png",
            RESULTS + "figures/operation_map_carbon_co2network_200.png",
            RESULTS + "figures/operation_map_carbon_co2network_400.png",
            RESULTS + "figures/operation_map_carbon_co2network_600.png",
            RESULTS + "figures/operation_map_carbon_co2network_800.png",
            RESULTS + "figures/operation_map_carbon_co2network_1000.png",
            RESULTS + "figures/operation_area_carbon_co2network.pdf",
            RESULTS + "figures/operation_area_co2_co2network.pdf",
            RESULTS + "figures/operation_area_hydrogen_co2network.pdf",
            RESULTS + "figures/operation_area_carbon_noco2network.pdf",
            RESULTS + "figures/operation_area_co2_noco2network.pdf",
            RESULTS + "figures/operation_area_hydrogen_noco2network.pdf",
            RESULTS + "figures/captureshare_line.pdf",
        ],


rule all:
    input:
        expand(
            RESULTS + "figures/capacity_map_{kind}_{design}_{sequestration}.png",
            kind=config["constants"]["kinds"],
            **config["scenarios"]
        ),
        expand(
            RESULTS + "figures/operation_map_{kind}_{design}_{sequestration}.png",
            **config["scenarios"],
            kind=config["constants"]["kinds"]
        ),
        expand(
            RESULTS + "figures/operation_area_{kind}_{design}.pdf",
            **config["scenarios"],
            kind=config["constants"]["kinds"]
        ),
        RESULTS + "figures/cost_area.pdf",
        RESULTS + "figures/sequestration_map.png",
        RESULTS + "figures/captureshare_line.pdf",
        RESULTS + "gifs/.gifs_created",


rule create_gifs:
    input:
        expand(
            RESULTS + "gifs/capacity_map_{kind}_{design}.gif",
            kind=config["constants"]["kinds"],
            **config["scenarios"]
        ),
        expand(
            RESULTS + "gifs/operation_map_{kind}_{design}.gif",
            kind=config["constants"]["kinds"],
            **config["scenarios"]
        ),
    output:
        RESULTS + "gifs/.gifs_created",
    shell:
        "touch {output}"


def get_maps(w):
    return expand(
        RESULTS + "figures/{which}_map_{kind}_{design}_{sequestration}.png",
        sequestration=config["scenarios"]["sequestration"],
        **w
    )


rule gif_map:
    input:
        get_maps,
    output:
        RESULTS + "gifs/{which}_map_{kind}_{design}.gif",
    shell:
        """
        convert -delay 100 -loop 0 -gravity South -background White -splice 0x35 -pointsize 40 -annotate +0+4 %f {input} {output}
        """


def get_all_networks(w):
    return expand(
        RESULTS + "networks/{design}_{sequestration}.nc",
        design=config["scenarios"]["design"],
        sequestration=config["scenarios"]["sequestration"],
    )


rule plot_cost_area:
    params:
        technology_groups=config["plotting"]["technology_groups"],
        technology_groups_colors=config["plotting"]["technology_group_colors"],
        settings=config["plotting"]["cost_area"],
        theme=config["plotting"]["theme"],
    input:
        networks=get_all_networks,
    output:
        map=RESULTS + "figures/cost_area.{ext}",
    resources:
        mem_mb=20000,
    script:
        "scripts/plot-cost-area.py"


rule plot_capacity_map:
    params:
        settings=config["plotting"]["capacity_map"],
        theme=config["plotting"]["theme"],
    input:
        network=RESULTS + "networks/{design}_{sequestration}.nc",
        onshore_regions=RESOURCES
        + "regions_onshore_elec_s{simpl}_{clusters}.geojson".format(**base),
        offshore_regions=RESOURCES
        + "regions_offshore_elec_s{simpl}_{clusters}.geojson".format(**base),
    output:
        map=RESULTS + "figures/capacity_map_{kind}_{design}_{sequestration}.{ext}",
    resources:
        mem_mb=20000,
    script:
        "scripts/plot-capacity-map.py"


rule plot_sequestration_map:
    params:
        settings=config["plotting"]["sequestration_map"],
        theme=config["plotting"]["theme"],
    input:
        network=RESULTS + "networks/co2network_200.nc",  # take any network
        offshore_regions=RESOURCES
        + "regions_offshore_elec_s{simpl}_{clusters}.geojson".format(**base),
    output:
        map=RESULTS + "figures/sequestration_map.{ext}",
    script:
        "scripts/plot-sequestration-map.py"


rule plot_operation_map:
    params:
        settings=config["plotting"]["operation_map"],
        theme=config["plotting"]["theme"],
    input:
        network=RESULTS + "networks/{design}_{sequestration}.nc",
        onshore_regions=RESOURCES
        + "regions_onshore_elec_s{simpl}_{clusters}.geojson".format(**base),
    resources:
        mem_mb=20000,
    output:
        map=RESULTS + "figures/operation_map_{kind}_{design}_{sequestration}.{ext}",
    script:
        "scripts/plot-operation-map.py"


rule plot_operation_bar:
    params:
        settings=config["plotting"]["operation_bar"],
        theme=config["plotting"]["theme"],
    input:
        network=RESULTS + "networks/{design}_{sequestration}.nc",
    output:
        map=RESULTS + "figures/operation_bar_{design}_{sequestration}.{ext}",
    script:
        "scripts/plot-operation-bar.py"


def get_design_networks(w):
    return expand(
        RESULTS + "networks/{design}_{sequestration}.nc",
        sequestration=config["scenarios"]["sequestration"],
        **w
    )


rule plot_operation_area:
    params:
        settings=config["plotting"]["operation_area"],
        theme=config["plotting"]["theme"],
    input:
        networks=get_design_networks,
    output:
        map=RESULTS + "figures/operation_area_{kind}_{design}.{ext}",
    resources:
        mem_mb=20000,
    script:
        "scripts/plot-operation-area.py"


rule plot_captureshare_line:
    params:
        settings=config["plotting"]["captureshare_line"],
        theme=config["plotting"]["theme"],
    input:
        networks=get_all_networks,
    output:
        map=RESULTS + "figures/captureshare_line.{ext}",
    resources:
        mem_mb=20000,
    script:
        "scripts/plot-captureshare-line.py"


def get_solved_network(wildcards):
    scenario = base.copy()
    sector_opts = scenario["sector_opts"] + f"-seq{wildcards.sequestration}"
    if wildcards.design == "noco2network":
        sector_opts = sector_opts + "-CF+sector+co2network+false"
    scenario["sector_opts"] = sector_opts
    return (
        RESULTS
        + "postnetworks/elec_s{simpl}_{clusters}_l{ll}_{opts}_{sector_opts}_{planning_horizons}.nc".format(
            **scenario
        )
    )


rule get_solved_network:
    input:
        get_solved_network,
    output:
        RESULTS + "networks/{design}_{sequestration}.nc",
    shell:
        """
        cp {input} {output}
        """


rule get_all_solved_networks:
    input:
        expand(RESULTS + "networks/{design}_{sequestration}.nc", **config["scenarios"]),


rule sync:
    params:
        cluster=config["cluster"],
    shell:
        """
        rsync -uvarh --no-g --ignore-missing-args --files-from=.sync-send . {params.cluster}
        rsync -uvarh --no-g --files-from=.sync-receive {params.cluster} .
        """


use rule * from pypsaeur as pypsaeur_*
