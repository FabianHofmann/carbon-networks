TEST = 0


configfile: "workflow/subworkflows/pypsa-eur/config/config.default.yaml"
configfile: "config/config.yaml"


if TEST:

    configfile: "config/config.test.yaml"


wildcard_constraints:
    lv="[a-z0-9\.]+",
    simpl="[a-zA-Z0-9]*",
    clusters="[0-9]+m?",
    opts="[-+a-zA-Z0-9]*",
    sector_opts="[-+a-zA-Z0-9\.\s]*",


module pypsaeur:
    snakefile:
        "subworkflows/pypsa-eur/Snakefile"
    config:
        config
# TODO: add data path from pypsa-eur



base = dict()
for k, v in config["scenario"].items():
    if k != "clusters":
        base[k] = v[0]


rule main:
    input:
        expand(
            "results/{run}/figures/{clusters}_nodes/{which}_map_{kind}.png",
            run=config["run"]["name"],
            clusters=config["scenario"]["clusters"],
            which=["capacity", "operation"],
            kind=config["constants"]["kinds"],
        ),
        expand(
            "results/{run}/figures/{clusters}_nodes/{figure}.png",
            run=config["run"]["name"],
            clusters=config["scenario"]["clusters"],
            figure=["operation_bar", "sequestration_map"],
        ),
        expand(
            "results/comparison/figures/{clusters}_nodes/operation_area_{kind}.pdf",
            clusters=config["scenario"]["clusters"],
            kind=config["constants"]["kinds"],
        ),
        expand(
            "results/comparison/figures/{clusters}_nodes/{figure}.pdf",
            clusters=config["scenario"]["clusters"],
            figure=["cost_area", "captureshare_line"],
        ),
        expand(
            "results/comparison/gifs/{clusters}_nodes/.gifs_created",
            clusters=config["scenario"]["clusters"],
        ),


rule get_solved_network:
    """
    Copy the solved network under a new name to fix unneeded wildcards.
    """
    input:
        network="results/{{run}}/postnetworks/elec_s{simpl}_{{clusters}}_l{ll}_{opts}_{sector_opts}_{planning_horizons}.nc".format(
            **base
        ),
    output:
        network="results/{run}/networks/{clusters}_nodes.nc",
    shell:
        """
        cp {input} {output}
        """


rule get_all_solved_networks:
    input:
        expand(
            "results/{run}/networks/{clusters}_nodes.nc",
            run=config["run"]["name"],
            **config["scenario"]
        ),


rule plot_operation_bar:
    params:
        settings=config["plotting"]["operation_bar"],
        theme=config["plotting"]["theme"],
    input:
        network="results/{run}/networks/{clusters}_nodes.nc",
    output:
        map="results/{run}/figures/{clusters}_nodes/operation_bar.{ext}",
    script:
        "scripts/plot-operation-bar.py"


rule plot_capacity_map:
    params:
        settings=config["plotting"]["capacity_map"],
        theme=config["plotting"]["theme"],
    input:
        network="results/{run}/networks/{clusters}_nodes.nc",
        onshore_regions="resources/regions_onshore_elec_s{simpl}_{{clusters}}.geojson".format(
            **base
        ),
        offshore_regions="resources/regions_offshore_elec_s{simpl}_{{clusters}}.geojson".format(
            **base
        ),
    output:
        map="results/{run}/figures/{clusters}_nodes/capacity_map_{kind}.{ext}",
    resources:
        mem_mb=20000,
    script:
        "scripts/plot-capacity-map.py"


rule plot_sequestration_map:
    params:
        settings=config["plotting"]["sequestration_map"],
        theme=config["plotting"]["theme"],
    input:
        network="results/{run}/networks/{clusters}_nodes.nc",
        offshore_regions="resources/regions_offshore_elec_s{simpl}_{{clusters}}.geojson".format(
            **base
        ),
    output:
        map="results/{run}/figures/{clusters}_nodes/sequestration_map.{ext}",
    script:
        "scripts/plot-sequestration-map.py"


rule plot_operation_map:
    params:
        settings=config["plotting"]["operation_map"],
        theme=config["plotting"]["theme"],
    input:
        network="results/{run}/networks/{clusters}_nodes.nc",
        onshore_regions="resources/regions_onshore_elec_s{simpl}_{{clusters}}.geojson".format(
            **base
        ),
    resources:
        mem_mb=20000,
    output:
        map="results/{run}/figures/{clusters}_nodes/operation_map_{kind}.{ext}",
    script:
        "scripts/plot-operation-map.py"


# COMPARISON


def get_networks(w):
    return expand(
        "results/{run}/networks/{clusters}_nodes.nc",
        run=config["run"]["name"],
        **w,
    )


rule plot_cost_area:
    params:
        technology_groups=config["plotting"]["technology_groups"],
        technology_groups_colors=config["plotting"]["technology_group_colors"],
        settings=config["plotting"]["cost_area"],
        theme=config["plotting"]["theme"],
    input:
        networks=get_networks,
    output:
        map="results/comparison/figures/{clusters}_nodes/cost_area.{ext}",
    resources:
        mem_mb=20000,
    script:
        "scripts/plot-cost-area.py"


rule plot_operation_area:
    params:
        settings=config["plotting"]["operation_area"],
        theme=config["plotting"]["theme"],
    input:
        networks=get_networks,
    output:
        map="results/comparison/figures/{clusters}_nodes/operation_area_{kind}.{ext}",
    resources:
        mem_mb=20000,
    script:
        "scripts/plot-operation-area.py"


rule plot_captureshare_line:
    params:
        settings=config["plotting"]["captureshare_line"],
        theme=config["plotting"]["theme"],
    input:
        networks=get_networks,
    output:
        map="results/comparison/figures/{clusters}_nodes/captureshare_line.{ext}",
    resources:
        mem_mb=20000,
    script:
        "scripts/plot-captureshare-line.py"


rule create_gifs:
    input:
        expand(
            "results/comparison/gifs/{clusters}_nodes/capacity_map_{kind}.gif",
            kind=config["constants"]["kinds"],
            clusters=config["scenario"]["clusters"],
        ),
        expand(
            "results/comparison/gifs/{clusters}_nodes/operation_map_{kind}.gif",
            kind=config["constants"]["kinds"],
            clusters=config["scenario"]["clusters"],
        ),
    output:
        "results/comparison/gifs/{clusters}_nodes/.gifs_created",
    shell:
        "touch {output}"


def get_maps(w):
    return expand(
        "results/{run}/figures/{clusters}_nodes/{which}_map_{kind}.png",
        **w,
        run=config["run"]["name"],
    )


rule gif_map:
    input:
        get_maps,
    output:
        "results/comparison/gifs/{clusters}_nodes/{which}_map_{kind}.gif",
    shell:
        """
        convert -delay 100 -loop 0 -gravity South -background White -splice 0x35 -pointsize 40 -annotate +0+4 %f {input} {output}
        """


use rule * from pypsaeur
